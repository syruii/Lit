
Lit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000406  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000538  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e86  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c8  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000673  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  000023bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c5  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000050d  00000000  00000000  00002a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002f22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_1>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  60:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  68:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e6 e0       	ldi	r30, 0x06	; 6
  80:	f4 e0       	ldi	r31, 0x04	; 4
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a8 34       	cpi	r26, 0x48	; 72
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>
  8e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
  92:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <i2c_start>:
	return TWDR;
}

void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  9a:	ec eb       	ldi	r30, 0xBC	; 188
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
  a0:	94 ea       	ldi	r25, 0xA4	; 164
  a2:	90 83       	st	Z, r25
  a4:	90 81       	ld	r25, Z
  a6:	99 23       	and	r25, r25
  a8:	ec f7       	brge	.-6      	; 0xa4 <i2c_start+0xa>
  aa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ae:	98 7f       	andi	r25, 0xF8	; 248
  b0:	98 30       	cpi	r25, 0x08	; 8
  b2:	a1 f4       	brne	.+40     	; 0xdc <i2c_start+0x42>
  b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  be:	ec eb       	ldi	r30, 0xBC	; 188
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <i2c_start+0x28>
  c8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	98 31       	cpi	r25, 0x18	; 24
  d0:	39 f0       	breq	.+14     	; 0xe0 <i2c_start+0x46>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 34       	cpi	r25, 0x40	; 64
  d6:	29 f4       	brne	.+10     	; 0xe2 <i2c_start+0x48>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	08 95       	ret
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret

000000e4 <i2c_write>:
  e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e8:	81 e8       	ldi	r24, 0x81	; 129
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <i2c_write+0xe>
  f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  fc:	98 7f       	andi	r25, 0xF8	; 248
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	98 32       	cpi	r25, 0x28	; 40
 102:	09 f4       	brne	.+2      	; 0x106 <i2c_write+0x22>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret

00000108 <i2c_read_ack>:
 108:	84 ec       	ldi	r24, 0xC4	; 196
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <i2c_read_ack+0xa>
 118:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 11c:	08 95       	ret

0000011e <i2c_read_nack>:
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 124:	ec eb       	ldi	r30, 0xBC	; 188
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	ec f7       	brge	.-6      	; 0x128 <i2c_read_nack+0xa>
 12e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 132:	08 95       	ret

00000134 <rtcc_wr>:
}

// writes a constant/variable in a RTCC register
void rtcc_wr(unsigned char time_var, unsigned char rtcc_reg)
{ 
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	c8 2f       	mov	r28, r24
 13a:	d6 2f       	mov	r29, r22
	i2c_start(ADDR_RTCC_WRITE)	 ;  // write DEVICE ADDR for RTCC WRITES
 13c:	8e ed       	ldi	r24, 0xDE	; 222
 13e:	0e 94 4d 00 	call	0x9a	; 0x9a <i2c_start>
	  i2c_write(rtcc_reg)        ;  // write the register's ADDRESS
 142:	8d 2f       	mov	r24, r29
 144:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_write>
	  i2c_write(time_var)        ;  // write byte variable in the register
 148:	8c 2f       	mov	r24, r28
 14a:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_write>
	return TWDR;
}

void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 14e:	84 e9       	ldi	r24, 0x94	; 148
 150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
{ 
	i2c_start(ADDR_RTCC_WRITE)	 ;  // write DEVICE ADDR for RTCC WRITES
	  i2c_write(rtcc_reg)        ;  // write the register's ADDRESS
	  i2c_write(time_var)        ;  // write byte variable in the register
	  i2c_stop()				 ;  // stop I2C communication
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <rtcc_read>:

// reads a single byte/reg into a pointer
void rtcc_read(uint8_t* data, uint8_t rtcc_addr) {
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
 162:	16 2f       	mov	r17, r22
	i2c_start(ADDR_RTCC_READ)	;  // write DEVICE ADDR for RTCC READS
 164:	8f ed       	ldi	r24, 0xDF	; 223
 166:	0e 94 4d 00 	call	0x9a	; 0x9a <i2c_start>
	i2c_write(rtcc_addr)		;  // write the register's ADDRESS
 16a:	81 2f       	mov	r24, r17
 16c:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_write>
	*data = i2c_read_ack()		;  // read and write byte to data pointer
 170:	0e 94 84 00 	call	0x108	; 0x108 <i2c_read_ack>
 174:	88 83       	st	Y, r24
	i2c_read_nack()				;  // finished reading, send Not ack
 176:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_read_nack>
	return TWDR;
}

void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 17a:	84 e9       	ldi	r24, 0x94	; 148
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_start(ADDR_RTCC_READ)	;  // write DEVICE ADDR for RTCC READS
	i2c_write(rtcc_addr)		;  // write the register's ADDRESS
	*data = i2c_read_ack()		;  // read and write byte to data pointer
	i2c_read_nack()				;  // finished reading, send Not ack
	i2c_stop()					;  // stop I2C communication
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	08 95       	ret

00000188 <rtcc_init>:

// Should only be called once to program before. Date-time is set at an arbitrary date for demonstration
// purposes default is 9:30AM in 24HOUR
void rtcc_init(void)
{	
	rtcc_wr(ALM_0,ADDR_CTRL)   ;	 // enable alarm 0
 188:	67 e0       	ldi	r22, 0x07	; 7
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	rtcc_wr(0x00,ADDR_ALM0SEC) ;     // set up alarm to trigger every minute
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	rtcc_wr(ALMx_POL|ALMxC_SEC,ADDR_ALM0CTL); // interrupt polarity is logic high, triggers at 00 seconds
 198:	6d e0       	ldi	r22, 0x0D	; 13
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	// set up time
	rtcc_wr(0x10,ADDR_YEAR)    ;     // initialize YEAR  register : doesn't matter
 1a0:	66 e0       	ldi	r22, 0x06	; 6
 1a2:	80 e1       	ldi	r24, 0x10	; 16
 1a4:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	rtcc_wr(0x03,ADDR_MNTH)    ;     // initialize MONTH register : doesn't matter
 1a8:	65 e0       	ldi	r22, 0x05	; 5
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	rtcc_wr(0x01,ADDR_DATE)    ;     // initialize DATE  register : doesn't matter
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	rtcc_wr(0x09,ADDR_HOUR)    ;     // initialize HOUR  register
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	89 e0       	ldi	r24, 0x09	; 9
 1bc:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	rtcc_wr(0x00,ADDR_MIN)     ;     // initialize MIN   register
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
	rtcc_wr(0x30|START_32KHZ,ADDR_SEC) ;   //init SEC   register, set START bit 
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	80 eb       	ldi	r24, 0xB0	; 176
 1cc:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
 1d0:	08 95       	ret

000001d2 <rtcc_int_reset>:
}

void rtcc_int_reset(void)
{
	rtcc_wr(ALMx_POL|ALMxC_SEC,ADDR_ALM0CTL); //
 1d2:	6d e0       	ldi	r22, 0x0D	; 13
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	0e 94 9a 00 	call	0x134	; 0x134 <rtcc_wr>
 1da:	08 95       	ret

000001dc <__vector_1>:
}

ISR(INT0_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	// read EEPROM for MIN + schedule
	// 24 different color settings in EEPROM, but for speed interrupt is based on minute change
	// minute is mod 24 to keep it working
	SColorRGB newRGB;
	// will always be zero
	unsigned int schedule_num = (unsigned int) (eeprom_read_byte((uint8_t*)SCHEDULE_NUM));
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 21a:	18 2f       	mov	r17, r24
	uint8_t minute_reg;
	rtcc_read(&minute_reg, ADDR_MIN);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	0e 94 ad 00 	call	0x15a	; 0x15a <rtcc_read>
	// convert minute reg into actual number
	uint8_t minute = ((minute_reg & MINUTE_TENS) >> 4) * 10 + (minute_reg & MINUTE_ONES);
 226:	89 81       	ldd	r24, Y+1	; 0x01
	uint8_t hour_offset = (minute % 24) * HOUR_OFFSET;
 228:	08 2f       	mov	r16, r24
 22a:	00 77       	andi	r16, 0x70	; 112
 22c:	06 95       	lsr	r16
 22e:	06 95       	lsr	r16
 230:	06 95       	lsr	r16
 232:	90 2f       	mov	r25, r16
 234:	99 0f       	add	r25, r25
 236:	99 0f       	add	r25, r25
 238:	09 0f       	add	r16, r25
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	08 0f       	add	r16, r24
 23e:	8b ea       	ldi	r24, 0xAB	; 171
 240:	08 9f       	mul	r16, r24
 242:	81 2d       	mov	r24, r1
 244:	11 24       	eor	r1, r1
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	98 e1       	ldi	r25, 0x18	; 24
 24c:	89 9f       	mul	r24, r25
 24e:	00 19       	sub	r16, r0
 250:	11 24       	eor	r1, r1
 252:	80 2f       	mov	r24, r16
 254:	88 0f       	add	r24, r24
 256:	08 0f       	add	r16, r24
	switch (schedule_num) {
 258:	11 30       	cpi	r17, 0x01	; 1
 25a:	a9 f0       	breq	.+42     	; 0x286 <__vector_1+0xaa>
 25c:	18 f0       	brcs	.+6      	; 0x264 <__vector_1+0x88>
 25e:	12 30       	cpi	r17, 0x02	; 2
 260:	31 f1       	breq	.+76     	; 0x2ae <__vector_1+0xd2>
 262:	38 c0       	rjmp	.+112    	; 0x2d4 <__vector_1+0xf8>
		case 0:
			newRGB.red = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_0 + hour_offset + RED_OFFSET)));
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	c8 01       	movw	r24, r16
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 26e:	e8 2e       	mov	r14, r24
			newRGB.green = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_0 + hour_offset + GREEN_OFFSET)));
 270:	c8 01       	movw	r24, r16
 272:	02 96       	adiw	r24, 0x02	; 2
 274:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 278:	f8 2e       	mov	r15, r24
			newRGB.blue = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_0 + hour_offset + BLUE_OFFSET)));
 27a:	c8 01       	movw	r24, r16
 27c:	03 96       	adiw	r24, 0x03	; 3
 27e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 282:	d8 2e       	mov	r13, r24
			break;
 284:	27 c0       	rjmp	.+78     	; 0x2d4 <__vector_1+0xf8>
		case 1:
			newRGB.red = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_1 + hour_offset + RED_OFFSET)));
 286:	10 e0       	ldi	r17, 0x00	; 0
 288:	c8 01       	movw	r24, r16
 28a:	88 5b       	subi	r24, 0xB8	; 184
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 292:	e8 2e       	mov	r14, r24
			newRGB.green = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_1 + hour_offset + GREEN_OFFSET)));
 294:	c8 01       	movw	r24, r16
 296:	87 5b       	subi	r24, 0xB7	; 183
 298:	9f 4f       	sbci	r25, 0xFF	; 255
 29a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 29e:	f8 2e       	mov	r15, r24
			newRGB.blue = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_1 + hour_offset + BLUE_OFFSET)));
 2a0:	c8 01       	movw	r24, r16
 2a2:	86 5b       	subi	r24, 0xB6	; 182
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 2aa:	d8 2e       	mov	r13, r24
			break;
 2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <__vector_1+0xf8>
		case 2:
			newRGB.red = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_2 + hour_offset + RED_OFFSET)));
 2ae:	10 e0       	ldi	r17, 0x00	; 0
 2b0:	c8 01       	movw	r24, r16
 2b2:	8c 56       	subi	r24, 0x6C	; 108
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 2ba:	e8 2e       	mov	r14, r24
			newRGB.green = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_2 + hour_offset + GREEN_OFFSET)));
 2bc:	c8 01       	movw	r24, r16
 2be:	8b 56       	subi	r24, 0x6B	; 107
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 2c6:	f8 2e       	mov	r15, r24
			newRGB.blue = (uint8_t) (eeprom_read_byte((uint8_t*) (SCHEDULE_2 + hour_offset + BLUE_OFFSET)));
 2c8:	c8 01       	movw	r24, r16
 2ca:	8a 56       	subi	r24, 0x6A	; 106
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 2d2:	d8 2e       	mov	r13, r24
			break;
	}
	// OC0A = RED	OC1A = BLUE 	OC1B = GREEN	OC2A = WHITE	
	OCR0A = newRGB.red;
 2d4:	e7 bc       	out	0x27, r14	; 39
	OCR1A = newRGB.blue;
 2d6:	8d 2d       	mov	r24, r13
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = newRGB.green;
 2e2:	8f 2d       	mov	r24, r15
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	df 90       	pop	r13
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <init>:

void init(void)
{
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	c8 54       	subi	r28, 0x48	; 72
 332:	d1 09       	sbc	r29, r1
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
	uint8_t color_array[72] = { 0x00, 0xFF, 0x00,
 33e:	88 e4       	ldi	r24, 0x48	; 72
 340:	e0 e0       	ldi	r30, 0x00	; 0
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	de 01       	movw	r26, r28
 346:	11 96       	adiw	r26, 0x01	; 1
 348:	01 90       	ld	r0, Z+
 34a:	0d 92       	st	X+, r0
 34c:	8a 95       	dec	r24
 34e:	e1 f7       	brne	.-8      	; 0x348 <init+0x28>
//				I2C DRIVERS
//	Based off https://github.com/g4lvanix/I2C-master-lib
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 350:	8d ef       	ldi	r24, 0xFD	; 253
 352:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
								0x2D, 0x15, 0x18,
								0x6A, 0x4B, 0xC9,
								0x47, 0xBB, 0xCE };
	// http://ww1.microchip.com/downloads/en/DeviceDoc/20002266H.pdf
	i2c_init();
	rtcc_init();
 356:	0e 94 c4 00 	call	0x188	; 0x188 <rtcc_init>
	rtcc_int_reset();
 35a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <rtcc_int_reset>
	// set up interrupts
	// http://www.atmel.com/Images/Atmel-42176-ATmega48PB-88PB-168PB_Datasheet.pdf
	EICRA |= ISC11	          ;     // trigger on rising edge of INT0
 35e:	e9 e6       	ldi	r30, 0x69	; 105
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	83 60       	ori	r24, 0x03	; 3
 366:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0)        ;     // turn on interrupt
 368:	e8 9a       	sbi	0x1d, 0	; 29
	// actual code will run per hour, but for demonstration purposes, only 6
	// schedule number is set to 0
	eeprom_write_byte((uint8_t*)SCHEDULE_NUM, 0x00);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <eeprom_write_byte>
 374:	8e 01       	movw	r16, r28
 376:	0f 5f       	subi	r16, 0xFF	; 255
 378:	1f 4f       	sbci	r17, 0xFF	; 255
 37a:	7e 01       	movw	r14, r28
 37c:	89 e4       	ldi	r24, 0x49	; 73
 37e:	e8 0e       	add	r14, r24
 380:	f1 1c       	adc	r15, r1
	for (int i = 0; i < 72; ++i) {
		uint8_t offset = i * RED_OFFSET;
		eeprom_write_byte((uint8_t*)(SCHEDULE_0 + offset), color_array[i]);
 382:	f8 01       	movw	r30, r16
 384:	61 91       	ld	r22, Z+
 386:	8f 01       	movw	r16, r30
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <eeprom_write_byte>
	EICRA |= ISC11	          ;     // trigger on rising edge of INT0
	EIMSK |= (1<<INT0)        ;     // turn on interrupt
	// actual code will run per hour, but for demonstration purposes, only 6
	// schedule number is set to 0
	eeprom_write_byte((uint8_t*)SCHEDULE_NUM, 0x00);
	for (int i = 0; i < 72; ++i) {
 390:	0e 15       	cp	r16, r14
 392:	1f 05       	cpc	r17, r15
 394:	b1 f7       	brne	.-20     	; 0x382 <init+0x62>
		uint8_t offset = i * RED_OFFSET;
		eeprom_write_byte((uint8_t*)(SCHEDULE_0 + offset), color_array[i]);
	}
	DDRB = 0b00001110;    // turn on PB1|OC1A and PB2|OC1B and PB3|OC2A  
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b01000000;    // turn on PD6|OC0A
 39a:	80 e4       	ldi	r24, 0x40	; 64
 39c:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = COM0A1 | WGM01 | WGM00;          // non-inverting mode on OC0A -> clear OC0A at MATCH, set at TOP (max value counter), fast PWM
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = CS00;                            // no pre-scaling
 3a2:	15 bc       	out	0x25, r1	; 37
	TCCR1A = COM1A1 | COM1B1 | WGM01 | WGM00; // non-inverting mode on 0C1A, 0C1B, fast PWM
 3a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = CS00;
 3a8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR2A = COM2A1 | WGM01 | WGM00;          // non-inverting mode on OC2A
 3ac:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = CS00;
 3b0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
}
 3b4:	c8 5b       	subi	r28, 0xB8	; 184
 3b6:	df 4f       	sbci	r29, 0xFF	; 255
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	08 95       	ret

000003d0 <main>:


int main(void)
{
	init();
 3d0:	0e 94 90 01 	call	0x320	; 0x320 <init>
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <main+0x4>

000003d6 <eeprom_read_byte>:
 3d6:	f9 99       	sbic	0x1f, 1	; 31
 3d8:	fe cf       	rjmp	.-4      	; 0x3d6 <eeprom_read_byte>
 3da:	92 bd       	out	0x22, r25	; 34
 3dc:	81 bd       	out	0x21, r24	; 33
 3de:	f8 9a       	sbi	0x1f, 0	; 31
 3e0:	99 27       	eor	r25, r25
 3e2:	80 b5       	in	r24, 0x20	; 32
 3e4:	08 95       	ret

000003e6 <eeprom_write_byte>:
 3e6:	26 2f       	mov	r18, r22

000003e8 <eeprom_write_r18>:
 3e8:	f9 99       	sbic	0x1f, 1	; 31
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <eeprom_write_r18>
 3ec:	1f ba       	out	0x1f, r1	; 31
 3ee:	92 bd       	out	0x22, r25	; 34
 3f0:	81 bd       	out	0x21, r24	; 33
 3f2:	20 bd       	out	0x20, r18	; 32
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	fa 9a       	sbi	0x1f, 2	; 31
 3fa:	f9 9a       	sbi	0x1f, 1	; 31
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
